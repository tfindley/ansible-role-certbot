---
# Certbot auto-renew cron job configuration (for certificate renewals).
certbot_auto_renew: true  # not yet implemented
certbot_auto_renew_user: "{{ ansible_user | default(lookup('env', 'USER')) }}"
certbot_auto_renew_hour: "3"
certbot_auto_renew_minute: "30"
certbot_auto_renew_options: "--quiet"

certbot_testmode: false
certbot_hsts: false

# Parameters used when creating new Certbot certs.
certbot_create_if_missing: false
certbot_create_method: standalone
certbot_admin_email: email@example.com
certbot_expand: false

# Default webroot, overwritten by individual per-cert webroot directories
certbot_webroot: /var/www/letsencrypt

certbot_certs:
  - email: janedoe@example.com
    webroot: "/var/www/html/"  # Specify your webroot if you're running in certbot_create_method=webroot
    domains:  # Add multiple domains as needed
      - example1.com
      - example2.com
    services:  # Extra
      - name: nginx.service
        method: restart  # Service will be triggered with teh 'restart' service action in the post deployment
      - name: apache.service
        method: reload  # Service will be triggered with the 'reload' service action in the post deployment. Warning: service must support 'reload'
      - name: varnish.service
        method: stopstart # Service will be stopped in a pre-hook, then started in a post-hook. Warning: service will flap
      - name: another.service  # With no 'method' the service will default to 'restart' - see above
    deploy:  # Optional - If you do not include this certificates will not be copied to destinations. 
      - dest: /opt/
        destowner: root
        destgroup: root
        destmode: '0755'
        destcreate: true
        fileowner: root
        filegroup: root
        filemode: '0644'
        cert: true
        chain: true
        fullchain: true
        privkey: true
    acme:
      server: acme  # Change this for a local ACME server if you are running one
      options:  # Add any options in here
# - domains:
#     - example3.com

certbot_create_extra_args: ""

certbot_create_command: >-
  {{ certbot_script }} certonly {{ '--dry-run' if certbot_dryrun | bool else '' }}
  {{ certbot_custom_server if cert_item.acme is defined and cert_item.acme.server != 'acme' else '' }}
  --{{ certbot_create_method }}
  {{ '--hsts'if certbot_hsts | bool else '' }}
  {{ '--test-cert' if certbot_testmode | bool else '' }}
  --noninteractive --agree-tos
  --email {{ cert_item.email | default(certbot_admin_email) }}
  {{ '--expand' if certbot_expand | bool else '' }}
  {{ '--webroot-path ' if certbot_create_method == 'webroot'  else '' }}
  {{ cert_item.webroot | default(certbot_webroot) if certbot_create_method == 'webroot' else '' }}
  {{ certbot_create_extra_args }}
  -d {{ cert_item.domains | join(',') }}
  {{ '--pre-hook ' ~ certbot_prehook ~ ' --post-hook ' ~ certbot_posthook
    if cert_item.services and certbot_create_method == 'standalone'
    else '' }}
  {{ '--deploy-hook ' ~ certbot_deployhook
    if cert_item.deploy and certbot_create_method == 'standalone'
    else '' }}

# Available options: 'package', 'snap', 'source'.
certbot_install_method: 'package'

# Source install configuration.
certbot_repo: https://github.com/certbot/certbot.git
certbot_version: master
certbot_keep_updated: true

# Where to put Certbot when installing from source.
certbot_dir: /opt/certbot

certbot_dryrun: false
certbot_verbose: false  # set to true to enable output from create commands
certbot_firewall: false  # set to true to enable basic firewall management on port 80 for .wellknown endpoint
certbot_test_dns: false
# certbot_test_dns_server:

# certbot_install_rootcerts: []
