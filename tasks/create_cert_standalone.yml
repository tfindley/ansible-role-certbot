---

- name: Debug Var
  ansible.builtin.debug:
    var: item
  loop: "{{ cert_item.domains }}"


- name: Certbot.Cert.Standalone - DNS Lookup
  become: false
  delegate_to: localhost
  when:
    - not certbot_dnscheck_ignore
  block:
    - name: Certbot.Cert.Standalone - DNS Lookup requested domain names
      ansible.builtin.assert:
        that:
          - lookup('community.general.dig', item + '.' ) is ansible.utils.ipv4 | bool
        quiet: true
      loop: "{{ cert_item.domains }}"
      when:
        - certbot_dnscheck_server is not defined or certbot_dnscheck_server == ''

    - name: Certbot.Cert.Standalone - DNS Lookup requested domain names
      ansible.builtin.assert:
        that:
          - lookup('community.general.dig', item + '.', '@' + certbot_dnscheck_server) is ansible.utils.ipv4 | bool
        quiet: true
      loop: "{{ cert_item.domains }}"
      when:
        - certbot_dnscheck_server is defined and certbot_dnscheck_server is ansible.utils.ipv4

- name: Certbot.Cert.Standalone - Check if certificate already exists.
  become: true
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ cert_item.domains | first | replace('*.', '') }}/cert.pem
  register: letsencrypt_cert

- name: Certbot.Cert.Standalone - Ensure pre and post hook folders exist.
  become: true
  ansible.builtin.file:
    path: /etc/letsencrypt/renewal-hooks/{{ item }}
    state: directory
    mode: "0755"
    owner: root
    group: root
  with_items:
    - pre
    - post
    - deploy

- name: Certbot.Cert.Standalone - Create pre hook to stop services.
  become: true
  ansible.builtin.template:
    src: stop_services.j2
    dest: /etc/letsencrypt/renewal-hooks/pre/stop_services
    owner: root
    group: root
    mode: "0750"
  when:
    - certbot_create_standalone_stop_services is defined
    - certbot_create_standalone_stop_services

# - name: debug var
#   ansible.builtin.debug:
#     var: certbot_create_standalone_deploy_certificates

# - name: debug var type
#   ansible.builtin.debug:
#     var: certbot_create_standalone_deploy_certificates | ansible.builtin.type_debug

# - name: debug var item 1
#   ansible.builtin.debug:
#     var: certbot_create_standalone_deploy_certificates[1]

# - name: debug var item 1 cert
#   ansible.builtin.debug:
#     var: certbot_create_standalone_deploy_certificates[0].wazuh

- name: Certbot.Cert.Standalone - Create deploy hook to deploy certificates.
  become: true
  ansible.builtin.template:
    src: copy_certificates.j2
    dest: /etc/letsencrypt/renewal-hooks/deploy/copy_certificates
    owner: root
    group: root
    mode: "0750"
  when:
    - certbot_create_standalone_deploy_certificates is defined
    - certbot_create_standalone_deploy_certificates

- name: Certbot.Cert.Standalone - Create post hook to start services.
  become: true
  ansible.builtin.template:
    src: start_services.j2
    dest: /etc/letsencrypt/renewal-hooks/post/start_services
    owner: root
    group: root
    mode: "0750"
  when:
    - certbot_create_standalone_stop_services is defined
    - certbot_create_standalone_stop_services

- name: Certbot.Cert.Standalone - Ensure HTTP port is open for webserver
  become: true
  register: certbot_http_open
  notify: Close HTTP Port
  when:
    - certbot_create_method == "standalone"
    - not letsencrypt_cert.stat.exists
  ansible.posix.firewalld:
    service: "http"
    permanent: true
    state: enabled
    immediate: true

- name: Certbot.Cert.Standalone - Print Certbot command
  when:
    - certbot_dryrun
  ansible.builtin.debug:
    msg:
      - "Certbot Command:"
      - "----------------"
      - "{{ certbot_create_command }}"
      - "----------------"

- name: Certbot.Cert.Standalone - Generate new certificate if one doesn't exist.  # noqa: no-changed-when
  become: true
  register: certbot_create_output
  when:
    - not letsencrypt_cert.stat.exists
  ansible.builtin.command:
    cmd: "{{ certbot_create_command }}"

- name: Certbot.Cert.Standalone - Report on certificate creation
  ansible.builtin.debug:
    var: certbot_create_output
